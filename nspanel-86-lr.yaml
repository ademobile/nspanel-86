substitutions:
  node_name: nspanel-86-lr
  device_name: NSPanel-86
  single_click: 'return "single";'
  double_click: 'return "double";'
  triple_click: 'return "triple";'
  held_down: 'return "held";'
  released: 'return "released";'
  tft_hmi_location: 'http://192.168.1.230:8123/local/nspanel'
#   screen_default_backlight: '50'

globals:
  - id: left_held
    type: bool
    restore_value: false
    initial_value: 'false'
  - id: right_held
    type: bool
    restore_value: false
    initial_value: 'false'

esphome:
  name: $node_name
  comment: $device_name

esp32:
  board: esp32dev
#   framework:
#     type: arduino

logger:

api:
  services:
    - service: upload_tft
      then:
        - lambda: 'id(ndpanel)->upload_tft();'
    
#     - service: set_page
#       variables:
#         page_name: string
#       then:
#         - lambda: id(ndpanel).send_command_printf("page %s", page_name.c_str());
    
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(ndpanel).send_command_printf("%s", cmd.c_str());'

ota:
  password: ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: ${node_name}_HotSpot
    password: !secret hotspot_password

captive_portal:

output:
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21

rtttl:
  id: buzzer
  output: buzzer_out

switch:
  - platform: gpio
    id: left_relay
    name: ${node_name} relay left
    pin:
      number: 22
  - platform: gpio
    id: right_relay
    name: ${node_name} relay right
    pin:
      number: 19
  - platform: gpio
    internal: true
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON
    
  - platform: template
    name: $node_name ready
    id: nextion_init
    entity_category: config
    restore_state: false
    assumed_state: off
    optimistic: true

# number:
#   platform: template
#   name: $node_name backlight
#   id: backlight
#   entity_category: config
#   unit_of_measurement: '%'
#   min_value: 0
#   max_value: 100
#   step: 1
#   initial_value: ${screen_default_backlight}
#   set_action:
#     then:
#       - lambda: 'id(ndpanel).set_backlight_brightness(x/100);'

uart:
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200
  id: nextion_uart

external_components:
  - source: github://pr#2956
    components: [nextion]
    refresh: 1h
    
display:
  - platform: nextion
    id: ndpanel
    uart_id: nextion_uart
    tft_url: $tft_hmi_location/$node_name.tft
    on_setup:
      then:
        - wait_until:
            api.connected
        - switch.template.publish:
            id: nextion_init
            state: on
#     on_setup:
#       then:
#         - number.set:
#             id: backlight
#             value: ${screen_default_backlight}

# time:
#   - platform: homeassistant
#     id: homeassistant_time
#     on_time:
#       - seconds: 0
#         minutes: /1
#         then:
#           - lambda: id(ndpanel).set_component_text_printf("home.txtTime", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
#           - lambda: id(ndpanel).set_component_text_printf("home.txtDate", "%02i-%02i", id(homeassistant_time).now().month, id(homeassistant_time).now().day_of_month);
#     on_time_sync:
#         then:
#           - wait_until:
#               switch.is_on: nextion_init
#           - lambda: id(ndpanel).set_component_text_printf("home.txTime", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
#           - lambda: id(ndpanel).set_component_text_printf("home.txtDate", "%02i-%02i", id(homeassistant_time).now().month, id(homeassistant_time).now().day_of_month);

button:
  - platform: restart
    name: ${node_name} restart
    
binary_sensor:
  - platform: gpio
    pin:
      number: 14
      mode: INPUT_PULLUP
    id: state_left
    internal: true
    filters:
      - invert:
      - delayed_on: 30ms
      - delayed_off: 30ms
    on_multi_click:
      - timing:
          - ON for 25ms to 200ms
          - OFF for at least 250ms
        then:
          - text_sensor.template.publish:
              id: button_left
              state: !lambda ${single_click}
      - timing:
          - ON for 25ms to 200ms
          - OFF for 25ms to 180ms
          - ON for 25ms to 200ms
          - OFF for at least 250ms
        then:
          - text_sensor.template.publish:
              id: button_left
              state: !lambda ${double_click}
      - timing:
          - ON for 40ms to 400ms
          - OFF for 40ms to 300ms
          - ON for 40ms to 400ms
          - OFF for 40ms to 300ms
          - ON for 40ms to 400ms
          - OFF for at least 330ms
        then:
          - text_sensor.template.publish:
              id: button_left
              state: !lambda ${triple_click}
      - timing:
          - ON for at least 1000ms
        then:
          - globals.set:
              id: left_held
              value: 'true'
          - text_sensor.template.publish:
              id: button_left
              state: !lambda ${held_down}
      - timing:
          - ON for at least 1100ms
          - OFF for at least 330ms
        then:
          - globals.set:
              id: left_held
              value: 'false'
          - text_sensor.template.publish:
              id: button_left
              state: !lambda ${released}
  - platform: gpio
    pin:
      number: 27
      mode: INPUT_PULLUP
    id: state_right
    internal: true
    filters:
      - invert:
      - delayed_on: 30ms
      - delayed_off: 30ms
    on_multi_click:
      - timing:
          - ON for 25ms to 200ms
          - OFF for at least 250ms
        then:
          - text_sensor.template.publish:
              id: button_right
              state: !lambda ${single_click}
      - timing:
          - ON for 25ms to 200ms
          - OFF for 25ms to 180ms
          - ON for 25ms to 200ms
          - OFF for at least 250ms
        then:
          - text_sensor.template.publish:
              id: button_right
              state: !lambda ${double_click}
      - timing:
          - ON for 40ms to 400ms
          - OFF for 40ms to 300ms
          - ON for 40ms to 400ms
          - OFF for 40ms to 300ms
          - ON for 40ms to 400ms
          - OFF for at least 50ms
        then:
          - text_sensor.template.publish:
              id: button_right
              state: !lambda ${triple_click}
      - timing:
          - ON for at least 1000ms
        then:
          - text_sensor.template.publish:
              id: button_right
              state: !lambda ${held_down}
      - timing:
          - ON for at least 1100ms
          - OFF for at least 330ms
        then:
          - globals.set:
              id: left_held
              value: 'false'
          - text_sensor.template.publish:
              id: button_right
              state: !lambda ${released}

text_sensor:
  - platform: template
    name: ${node_name} button left
    id: button_left
    icon: "mdi:toggle-switch"
    on_value:
      then:
        - if:
            condition:
              or:
              - lambda: return id(left_held);
              - text_sensor.state:
                  id: button_left
                  state: ""
            else:
              - delay: 80ms
              - text_sensor.template.publish:
                  id: button_left
                  state: !lambda 'return "";'
  - platform: template
    name: ${node_name} button right
    id: button_right
    icon: "mdi:toggle-switch"
    on_value:
      then:
        - if:
            condition:
              or:
              - lambda: return id(right_held);
              - text_sensor.state:
                  id: button_right
                  state: ""
            else:
              - delay: 80ms
              - text_sensor.template.publish:
                  id: button_right
                  state: !lambda 'return "";'
  
  - platform: homeassistant
    id: time_text
    entity_id: sensor.nspanel_time
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(ndpanel).set_component_text_printf("home.txtTime", "%s", id(time_text).state.c_str());
  - platform: homeassistant
    id: date_text
    entity_id: sensor.nspanel_date
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(ndpanel).set_component_text_printf("home.txtDate", "%s", id(date_text).state.c_str());

sensor:
  - platform: wifi_signal
    name: ${node_name} WiFi Signal
    update_interval: 60s
  
  # - platform: ntc
  #   id: temperature
  #   sensor: resistance_sensor
  #   calibration:
  #     b_constant: 3950
  #     reference_temperature: 25Â°C
  #     reference_resistance: 10kOhm
  #   name: ${node_name} temperature

  # - platform: resistance
  #   id: resistance_sensor
  #   sensor: ntc_source
  #   configuration: DOWNSTREAM
  #   resistor: 11.2kOhm
  #   internal: true

  # - platform: adc
  #   id: ntc_source
  #   pin: 38
  #   update_interval: 10s
  #   attenuation: 11db
  #   internal: true
